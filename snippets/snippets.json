{
    "Print to console": {
        "prefix": "log",
        "body": [
            "console.log('$1');",
            "$2"
        ],
        "description": "Log output to console"
    },
    "Cat to file": {
        "prefix": "cat",
        "body": [
            "cat <<-EOF ${1:>/path/to/file}",
            "\t$2",
            "EOF"
        ],
        "description": "cat... EOF"
    },
    "Function": {
        "prefix": "function",
        "body": [
            "#",
            "# TODO function description",
            "# @param\tTODO The first parameter",
            "# @return",
            "#",
            "${1:function_name}() {",
            "\tlocal ${2:param}=\\$1; shift",
            "\t${3:echo \"TODO !\"}",
            "}"
        ],
        "description": "New function"
    },
    "Getopts simple": {
        "prefix": "getopts",
        "body": [
            "while getopts :${1:?}h arg",
            "do",
            "\tcase \\$arg in",
            "\t\t${1})",
            "\t\t\t${0:: #statements}",
            "\t\t\t;;",
            "\t\t:|?|h)",
            "\t\t\t[[ \\$arg == \\? ]] && print_error \"L'option -\\$OPTARG n'est pas prise en charge !\"",
            "\t\t\t[[ \\$arg == : ]] && print_error \"L'option -\\$OPTARG requiert un argument !\"",
            "\t\t\tusage",
            "\t\t\texit \\$([[ \\$arg == h ]] && echo 0 || echo 2)",
            "\t\t\t;;",
            "\tesac",
            "done"
        ],
        "description": "while getopts … done (simple)"
    },
    "Getopts full": {
        "prefix": "getopts",
        "body": [
            "while getopts :${1:?}a-:fqvh arg",
            "do",
            "\tcase \\$arg in",
            "\t\t-)",
            "\t\t\tif [[ \\${!OPTIND} == -* ]]; then",
            "\t\t\t\tunset -v value",
            "\t\t\telse",
            "\t\t\t\tvalue=\"\\${!OPTIND}\"",
            "\t\t\t\t((OPTIND++))",
            "\t\t\tfi",
            "\t\t\tcase \\$OPTARG in",
            "\t\t\t\thost)",
            "\t\t\t\t\tHOST=\\$value",
            "\t\t\t\t\t;;",
            "\t\t\t\tport)",
            "\t\t\t\t\tif [[ ! \\$value =~ ^[0-9]+\\$ ]]; then",
            "\t\t\t\t\t\tprint_error \"L'option --\\$OPTARG a besoin d'un entier en parametre. \\\"\\$value\\\" n'est pas un entier.\"",
            "\t\t\t\t\t\tusage",
            "\t\t\t\t\t\texit 2",
            "\t\t\t\t\tfi",
            "\t\t\t\t\t;;",
            "\t\t\t\t*)",
            "\t\t\t\t\tprint_error \"Le parametre '--\\$OPTARG' n'est pas reconnu !\"",
            "\t\t\t\t\tusage",
            "\t\t\t\t\texit 2",
            "\t\t\t\t\t;;",
            "\t\t\t\tesac",
            "\t\t\t;;",
            "\t\ta)",
            "\t\t\t[[ \\$OPTARG == -* ]] && print_error \"L'option -\\$arg requiert un argument !\" && usage && exit 2",
            "\t\t\t;;",
            "\t\t${1})",
            "\t\t\t${0:: #statements}",
            "\t\t\t;;",
            "\t\tf) FORCE=1 ;;",
            "\t\tq) QUIET=1 ;;",
            "\t\tv) VERBOSE=1 ;;",
            "\t\t:|?|h)",
            "\t\t\t[[ \\$arg == \\? ]] && print_error \"L'option -\\$OPTARG n'est pas prise en charge !\"",
            "\t\t\t[[ \\$arg == : ]] && print_error \"L'option -\\$OPTARG requiert un argument !\"",
            "\t\t\tusage",
            "\t\t\texit \\$([[ \\$arg == h ]] && echo 0 || echo 2)",
            "\t\t\t;;",
            "\tesac",
            "done"
        ],
        "description": "while getopts … done"
    },
    "header": {
        "prefix": "#!",
        "body": [
            "#!/bin/bash",
            "#",
            "# @version \t\t18.6.0-SNAPSHOT",
            "# @script\t\tt_${1:TODO}.sh",
            "# @description\t${2:TODO : Script detailed description}",
            "#",
            "##"
        ],
        "description": "header"
    },
    "heredoc2var": {
        "prefix": "read",
        "body": [
            "read -r -d '' ${1:variableName} <<-EOF",
            "${2:Content to assign to ${1}}",
            "EOF",
            "echo \"\\$${1}\"",
            "$3"
        ],
        "description": "Assign heredoc to variable"
    },
    "mktemp": {
        "prefix": "mktemp",
        "body": [
            "${1:tmpFile}=\\$(mktemp --tmpdir tmpPGIH${2:-pgihadmin}.XXXXXXXXXX) || \\",
            "\tprint_error_and_exit \"Impossible de creer un fichier temporaire dans \\$TMPDIR !\"",
            "trap \"rm -f \\${${1}:-/tmp/dummy}\" 0 1 2 3 15"
        ],
        "description": "Create temp file into $TMPDIR"
    },
    "New task": {
        "prefix": "newtask",
        "body": [
            "#!/bin/bash",
            "#",
            "# @version \t\t14.4.0-SNAPSHOT",
            "# @script\t\tt_${1:TODO}.sh",
            "# @description\t${2:TODO : Description detaillee du script}",
            "#",
            "##",
            "source p_common.sh",
            "usage() {",
            "\tcat <<-EOF",
            "\tUsage: pgihadmin ${1} <CIBLE> [-f] [-q] [-h]",
            "\tCette tache permet de ${2}",
            "\tPARAMETRES:",
            "\t===========",
            "\t    CIBLE    Serveur cible : <vide> ou all, aps, ts, lb, ord, apsN, tsN, lbN, ordN (avec N un nombre)",
            "\tOPTIONS:",
            "\t========",
            "\t    -f    Mode force",
            "\t    -q    Mode silencieux",
            "\t    -h    Affiche ce message",
            "\tEOF",
            "}",
            "#   __             _   _",
            "#  / _|___ _ _  __| |_(_)___ _ _  ___",
            "# |  _/ _ \\ ' \\/ _|  _| / _ \\ ' \\(_-<",
            "# |_| \\___/_||_\\__|\\__|_\\___/_||_/__/",
            "#",
            "#",
            "# TODO Function '${5}' description",
            "# @param\tTODO The first parameter",
            "# @return\tTODO",
            "#",
            "${5:function_name}() {",
            "\tlocal firstParam=\\$1; shift",
            "\tlocal secondParam=\\$1; shift",
            "\t${6:echo \"Function '${5}' not yet implemented!\" # TODO}",
            "}",
            "#             _",
            "#  _ __  __ _(_)_ _",
            "# | '  \\/ _` | | ' \\",
            "# |_|_|_\\__,_|_|_||_|",
            "#",
            "main() {",
            "\twhile getopts :${3:?}a-:fqvh arg",
            "\tdo",
            "\t\tcase \\$arg in",
            "\t\t\t-)",
            "\t\t\t\tif [[ \\${!OPTIND} == -* ]]; then",
            "\t\t\t\t\tunset -v value",
            "\t\t\t\telse",
            "\t\t\t\t\tvalue=\"\\${!OPTIND}\"",
            "\t\t\t\t\t((OPTIND++))",
            "\t\t\t\tfi",
            "\t\t\t\tcase \\$OPTARG in",
            "\t\t\t\t\thost)",
            "\t\t\t\t\t\tHOST=\\$value",
            "\t\t\t\t\t\t;;",
            "\t\t\t\t\tport)",
            "\t\t\t\t\t\tif [[ ! \\$value =~ ^[0-9]+\\$ ]]; then",
            "\t\t\t\t\t\t\tprint_error \"L'option --\\$OPTARG a besoin d'un entier en parametre. \\\"\\$value\\\" n'est pas un entier.\"",
            "\t\t\t\t\t\t\tusage",
            "\t\t\t\t\t\t\texit 2",
            "\t\t\t\t\t\tfi",
            "\t\t\t\t\t\t;;",
            "\t\t\t\t\t*)",
            "\t\t\t\t\t\tprint_error \"Le parametre '--\\$OPTARG' n'est pas reconnu !\"",
            "\t\t\t\t\t\tusage",
            "\t\t\t\t\t\texit 2",
            "\t\t\t\t\t\t;;",
            "\t\t\t\t\tesac",
            "\t\t\t\t;;",
            "\t\t\ta)",
            "\t\t\t\t[[ \\$OPTARG == -* ]] && print_error \"L'option -\\$arg requiert un argument !\" && usage && exit 2",
            "\t\t\t\t;;",
            "\t\t\t${3})",
            "\t\t\t\t${4:: #statements}",
            "\t\t\t\t;;",
            "\t\t\tf) FORCE=1 ;;",
            "\t\t\tq) QUIET=1 ;;",
            "\t\t\tv) VERBOSE=1 ;;",
            "\t\t\t:|?|h)",
            "\t\t\t\t[[ \\$arg == \\? ]] && print_error \"L'option -\\$OPTARG n'est pas prise en charge !\"",
            "\t\t\t\t[[ \\$arg == : ]] && print_error \"L'option -\\$OPTARG requiert un argument !\"",
            "\t\t\t\tusage",
            "\t\t\t\texit \\$([[ \\$arg == h ]] && echo 0 || echo 2)",
            "\t\t\t\t;;",
            "\t\tesac",
            "\tdone",
            "\t$7",
            "}",
            "main \"\\$@\""
        ],
        "description": "New task template"
    },
    "Shorthand if..then..else": {
        "prefix": "ite",
        "body": "[[ ${1:condition} ]] && ${2:echo \"true\"} || ${3:echo \"false\"}",
        "description": "[[ ]] && true || false"
    },
    "stderr to /dev/null": {
        "prefix": "2",
        "body": "2>/dev/null",
        "description": "2>/dev/null"
    },
    "stdout to /dev/null": {
        "prefix": "1",
        "body": ">/dev/null",
        "description": ">/dev/null"
    },
    "stdout & stderr to /dev/null": {
        "prefix": "12",
        "body": ">/dev/null 2>&1",
        "description": ">/dev/null 2>&1"
    },
    "Usage function": {
        "prefix": "usage",
        "body": [
            "usage() {",
            "\tcat <<-EOF",
            "\tUsage: pgihadmin ${1:tache} <CIBLE> [-f] [-q] [-h]",
            "\tCette tache permet de ${2:bla bla}",
            "\tPARAMETRES:",
            "\t===========",
            "\t    CIBLE    Serveur cible : <vide> ou all, aps, ts, lb, ord, apsN, tsN, lbN, ordN (avec N un nombre)",
            "\tOPTIONS:",
            "\t========",
            "\t    -f    Mode force",
            "\t    -q    Mode silencieux",
            "\t    -h    Affiche ce message",
            "\tEOF",
            "}"
        ],
        "description": "Usage fonction template"
    },
    "while read < file": {
        "prefix": "while",
        "body": [
            "while read -r line; do",
            "\techo \"\\$line\"",
            "done < ${1:/path/to/file}"
        ],
        "description": "While loop to read file"
    }
}